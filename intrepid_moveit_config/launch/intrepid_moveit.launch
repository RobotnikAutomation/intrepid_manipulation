<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="true" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find intrepid_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we do not launch RViz -->
  <arg name="rviz" default="true" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we won't load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- By default, we are in simulation -->
  <arg name="sim" default="true"/>

  <!-- Default joint states topic -->
  <arg if="$(arg sim)" name="joint_states_topic" default="joint_states"/>
  <arg unless="$(arg sim)" name="joint_states_topic" default="/j2s6s200_driver/out/joint_state"/>

  <!-- Default ROBOT namespace -->
  <arg name="ns" default="robot"/>
 
  <!--remap from="robot_description" to="/robot/robot_description"/-->
  <!--remap from="/robot/robot_description_semantic" to="robot_description_semantic"/-->
	
    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find intrepid_moveit_config)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="false"/>
      <arg name="info" value="true"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="joint_states_topic" value="$(arg joint_states_topic)"/>
      <arg name="sim" value="$(arg sim)"/>
      <arg name="load_robot_description" value="$(arg load_robot_description)"/>	
    </include>  

    <!-- If database loading was enabled, start mongodb as well -->
    <include file="$(find intrepid_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
      <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
    </include>

    <group unless="$(arg sim)">
      <!-- Run joint trajectory action server, which receives planned motion goal under "follow_joint_trajectory", and publish ROS standard trajectory via topic "command". Then for specified robot, the trajectory will be interpreted to their own joint trajectory controller -->
      <!-- <node name="j2s6s200_joint_trajectory_action_server" pkg="kinova_driver" type="joint_trajectory_action_server" output="screen" respawn="false" args="j2s6s200"/> -->
      <node name="j2s6s200_pid_joint_trajectory_action_server" pkg="kinova_driver" type="pid_traj_action_server.py" output="screen" respawn="false" args="j2s6s200">
        <remap from="joint_states" to="$(arg joint_states_topic)"/>
      </node>

      <!-- Run gripper command action server, which receives planned motion goal under "gripper_command". After receiving the command from Moveit Rviz Plugin, this node act as an actionlib client and send the goal to the finger position action server from kinova_driver.  -->
      <node name="j2s6s200_gripper_command_action_server" pkg="kinova_driver" type="gripper_command_action_server" output="screen" respawn="false" args="j2s6s200" >
        <param name="finger_number_" type="int" value="2" /> 
        <param name="finger_conv_ratio_" type="double" value="$(eval 1.31 / 6400.0)" />
      </node>
    </group>



  <!-- If RViz loading was enabled, start RViz -->
  <include file="$(find intrepid_moveit_config)/launch/moveit_rviz.launch" if="$(arg rviz)">
    <arg name="rviz_config" value="$(find intrepid_moveit_config)/launch/intrepid.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="ns" value="$(arg ns)"/>
    <arg name="joint_states_topic" value="$(arg joint_states_topic)"/>
  </include>	

</launch>
